mkdir express-postgres-api
cd express-postgres-api
npm init -y

Install required packages:

npm install express pg body-parser


---

📝 Step 2: PostgreSQL Setup

Create Database and Table:

CREATE DATABASE mydb;

CREATE TABLE items (
    id SERIAL PRIMARY KEY,
    name VARCHAR(100),
    description TEXT
);


---

🔌 Step 3: Express.js API Code

Create index.js:

const express = require('express');
const bodyParser = require('body-parser');
const { Pool } = require('pg');

const app = express();
const port = 3000;

// PostgreSQL connection configuration
const pool = new Pool({
    user: 'your_db_user',
    host: 'localhost',
    database: 'mydb',
    password: 'your_db_password',
    port: 5432,
});

// Middleware
app.use(bodyParser.json());

// Routes

// Basic route
app.get('/', (req, res) => {
    res.send('Welcome to the Simple Express PostgreSQL API!');
});

// CREATE
app.post('/items', async (req, res) => {
    const { name, description } = req.body;
    try {
        const result = await pool.query(
            'INSERT INTO items (name, description) VALUES ($1, $2) RETURNING *',
            [name, description]
        );
        res.status(201).json(result.rows[0]);
    } catch (error) {
        console.error(error);
        res.status(500).json({ error: 'Failed to create item' });
    }
});

// READ ALL
app.get('/items', async (req, res) => {
    try {
        const result = await pool.query('SELECT * FROM items');
        res.json(result.rows);
    } catch (error) {
        console.error(error);
        res.status(500).json({ error: 'Failed to fetch items' });
    }
});

// READ ONE
app.get('/items/:id', async (req, res) => {
    const { id } = req.params;
    try {
        const result = await pool.query('SELECT * FROM items WHERE id = $1', [id]);
        if (result.rows.length === 0) {
            return res.status(404).json({ error: 'Item not found' });
        }
        res.json(result.rows[0]);
    } catch (error) {
        console.error(error);
        res.status(500).json({ error: 'Failed to fetch item' });
    }
});

// UPDATE
app.put('/items/:id', async (req, res) => {
    const { id } = req.params;
    const { name, description } = req.body;
    try {
        const result = await pool.query(
            'UPDATE items SET name = $1, description = $2 WHERE id = $3 RETURNING *',
            [name, description, id]
        );
        if (result.rows.length === 0) {
            return res.status(404).json({ error: 'Item not found' });
        }
        res.json(result.rows[0]);
    } catch (error) {
        console.error(error);
        res.status(500).json({ error: 'Failed to update item' });
    }
});

// DELETE
app.delete('/items/:id', async (req, res) => {
    const { id } = req.params;
    try {
        const result = await pool.query('DELETE FROM items WHERE id = $1 RETURNING *', [id]);
        if (result.rows.length === 0) {
            return res.status(404).json({ error: 'Item not found' });
        }
        res.json({ message: 'Item deleted successfully' });
    } catch (error) {
        console.error(error);
        res.status(500).json({ error: 'Failed to delete item' });
    }
});

// Start server
app.listen(port, () => {
    console.log(`Server is running on http://localhost:${port}`);
});


---

🛠️ Step 4: Run the Server

node index.js


---

📬 Step 5: Testing with Postman

Method	Endpoint	Description

GET	/items	Get all items
GET	/items/:id	Get item by ID
POST	/items	Create new item
PUT	/items/:id	Update item
DELETE	/items/:id	Delete item


Example Create Request (POST)

POST http://localhost:3000/items

{
    "name": "Example Item",
    "description": "This is a sample item"
}


---
